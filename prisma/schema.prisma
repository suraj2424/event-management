// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ORGANIZER
  ATTENDEE
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String       @unique
  password        String       // Hashed password
  role            UserRole     @default(ATTENDEE)
  organizedEvents Event[]      @relation("Organizer")
  attendedEvents  Attendance[]
  tickets         Ticket[]
  payments        Payment[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Event {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  location        String
  capacity        Int
  logo            String
  photos          String[]
  contactEmail    String
  contactPhone    String
  hostName        String
  hostDescription String
  price           Float?         // Ticket price (null for free events)
  currency        String         @default("USD")
  socialLinks     SocialLinks?   @relation("EventSocialLinks", fields: [socialLinksId], references: [id])
  socialLinksId   Int?
  specialGuests   SpecialGuest[] @relation("EventSpecialGuests")
  attendance      Attendance[]   @relation("EventAttendance")
  tickets         Ticket[]       @relation("EventTickets")
  organizer   User   @relation("Organizer", fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId String
  @@map("events")
}

model SpecialGuest {
  id               Int    @id @default(autoincrement())
  guestName        String
  guestDescription String
  eventId          Int
  event            Event  @relation("EventSpecialGuests", fields: [eventId], references: [id], onDelete: Cascade)

  @@map("special_guests")
}

model SocialLinks {
  id        Int     @id @default(autoincrement())
  facebook  String?
  twitter   String?
  instagram String?
  events    Event[] @relation("EventSocialLinks")

  @@map("social_links")
}

enum EventStatus {
  UPCOMING
  ONGOING
  PAST
}

model Attendance {
  id        String           @id @default(cuid())
  userId    String
  eventId   Int
  status    AttendanceStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event            @relation("EventAttendance", fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

enum AttendanceStatus {
  REGISTERED
  CONFIRMED
  ATTENDED
  CANCELLED
}

model Ticket {
  id              String        @id @default(cuid())
  ticketNumber    String        @unique
  qrCode          String?       // QR code for ticket validation
  userId          String
  eventId         Int
  paymentId       String?
  status          TicketStatus  @default(ACTIVE)
  purchaseDate    DateTime      @default(now())
  validatedAt     DateTime?
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event           Event         @relation("EventTickets", fields: [eventId], references: [id], onDelete: Cascade)
  payment         Payment?      @relation(fields: [paymentId], references: [id])
  
  @@map("tickets")
}

model Payment {
  id              String        @id @default(cuid())
  stripeSessionId String        @unique
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  userId          String
  eventId         Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  tickets         Ticket[]
  
  @@map("payments")
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}