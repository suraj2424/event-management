// eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-require-imports
const { execSync, execFileSync } = require('child_process');
// eslint-disable-next-line @typescript-eslint/no-require-imports
const fs = require('fs');

const PROJECT_ID = 'evenzia-app';
const REGION = 'us-central1';
const REDIS_INSTANCE = 'evenzia-redis';

function run(cmd, errorMsg) {
  try {
    return execSync(cmd, { stdio: 'pipe' }).toString().trim();
  } catch (e) {
    if (errorMsg) {
      console.error(`‚ùå ${errorMsg}`);
    }
    if (e.stdout) console.error(e.stdout.toString());
    if (e.stderr) console.error(e.stderr.toString());
    process.exit(1);
  }
}

// NEW: Silent run function that doesn't exit on error
function runSilent(cmd) {
  try {
    return execSync(cmd, { stdio: 'pipe' }).toString().trim();
  } catch (e) {
    console.log(e)
    return null;
  }
}

function checkGcloud() {
  try {
    execSync('gcloud --version', { stdio: 'ignore' });
    console.log('‚úÖ gcloud CLI found.');
  } catch {
    console.error('‚ùå gcloud CLI not found! Please install it: https://cloud.google.com/sdk/docs/install');
    process.exit(1);
  }
}

function checkAuth() {
  const account = run('gcloud auth list --filter=status:ACTIVE --format="value(account)"', 'Not authenticated with gcloud.');
  if (!account) {
    console.error('‚ùå No active gcloud account. Run: gcloud auth login');
    process.exit(1);
  }
  console.log(`‚úÖ Authenticated as: ${account}`);
}

function setProject() {
  run(`gcloud config set project ${PROJECT_ID}`, 'Failed to set project.');
  console.log(`‚úÖ Project set to ${PROJECT_ID}`);
}

function enableAPIs() {
  const apis = [
    'redis.googleapis.com',
    'compute.googleapis.com',
    'servicenetworking.googleapis.com',
    'run.googleapis.com'
  ];
  apis.forEach(api => {
    console.log(`Enabling API: ${api} ...`);
    run(`gcloud services enable ${api}`, `Failed to enable API: ${api}`);
  });
  console.log('‚úÖ All required APIs enabled.');
}

// FIXED: Use runSilent instead of run to avoid script exit
function redisExists() {
  const result = runSilent(`gcloud redis instances describe ${REDIS_INSTANCE} --region=${REGION}`);
  return result !== null;
}

function createRedis() {
  if (redisExists()) {
    console.log('‚úÖ Redis instance already exists.');
    return;
  }
  
  console.log('Creating Redis instance (this may take several minutes)...');
  
  // FIXED: Use --size instead of --memory-size-gb
  const createCmd = `gcloud redis instances create ${REDIS_INSTANCE} --size=1 --region=${REGION} --tier=basic --redis-version=redis_7_0 --network=projects/${PROJECT_ID}/global/networks/default`;
  
  console.log('Running command:', createCmd);
  run(createCmd, 'Failed to create Redis instance.');
  
  // Wait for instance to be ready
  console.log('Waiting for Redis instance to become ready...');
  let attempts = 0;
  const maxAttempts = 20;
  
  while (attempts < maxAttempts) {
    attempts++;
    console.log(`Checking status... (attempt ${attempts}/${maxAttempts})`);
    
    const status = runSilent(`gcloud redis instances describe ${REDIS_INSTANCE} --region=${REGION} --format="value(state)"`);
    
    if (status === 'READY') {
      console.log('‚úÖ Redis instance is ready!');
      break;
    } else if (status === 'FAILED') {
      console.error('‚ùå Redis instance creation failed!');
      process.exit(1);
    } else {
      console.log(`Current status: ${status || 'CREATING'}`);
      // Wait 30 seconds before next check
      console.log('Waiting 30 seconds...');
      // eslint-disable-next-line @typescript-eslint/no-require-imports
      require('child_process').execSync('timeout 30 2>nul || sleep 30', { stdio: 'ignore' });
    }
  }
  
  if (attempts >= maxAttempts) {
    console.log('‚ö†Ô∏è Timeout waiting for Redis instance. It may still be creating...');
  }
}

function getRedisIP() {
  const ip = run(`gcloud redis instances describe ${REDIS_INSTANCE} --region=${REGION} --format="value(host)"`, 'Failed to get Redis IP.');
  if (!ip) {
    console.error('‚ùå Could not retrieve Redis IP.');
    process.exit(1);
  }
  return ip;
}

function writeEnv(ip) {
  const envContent = [
    `# Redis Configuration (Generated by setup-gcp.js on ${new Date().toISOString()})`,
    `REDIS_HOST=${ip}`,
    `REDIS_PORT=6379`,
    `GOOGLE_CLOUD_PROJECT=${PROJECT_ID}`,
    `GOOGLE_CLOUD_REGION=${REGION}`,
    '',
    '# Add your other environment variables below this line:',
    '# NEXTAUTH_SECRET=your-nextauth-secret-here',
    '# DATABASE_URL=your-database-connection-string',
    '# NEXT_PUBLIC_API_URL=http://localhost:3000',
    ''
  ].join('\n');

  const envPath = '.env.local';
  if (fs.existsSync(envPath)) {
    fs.appendFileSync(envPath, '\n' + envContent);
    console.log('‚úÖ Redis configuration appended to existing .env.local!');
  } else {
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ New .env.local file created with Redis configuration!');
  }
}

function main() {
  console.log('üöÄ Google Cloud Redis Setup Script (Node.js)');
  console.log('=========================================');
  console.log(`Project: ${PROJECT_ID}`);
  console.log(`Region: ${REGION}`);
  console.log(`Instance: ${REDIS_INSTANCE}\n`);
  
  checkGcloud();
  checkAuth();
  setProject();
  enableAPIs();
  createRedis();
  const ip = getRedisIP();
  
  console.log('\nüéâ Setup Complete!');
  console.log('=========================================');
  console.log('üìã Redis Configuration:');
  console.log(`   Project ID: ${PROJECT_ID}`);
  console.log(`   Redis IP:   ${ip}`);
  console.log(`   Redis Port: 6379`);
  console.log(`   Region:     ${REGION}`);
  console.log(`   Instance:   ${REDIS_INSTANCE}\n`);
  
  writeEnv(ip);
  
  console.log('\nüí° Next Steps:');
  console.log('1. Install Redis client: npm install ioredis');
  console.log('2. Install types: npm install @types/ioredis --save-dev');
  console.log('3. Set up Redis client in your app using the connection details above.');
  console.log('4. Test your Redis connection.');
  console.log('\nüìö Useful Commands:');
  console.log(`‚Ä¢ List Redis instances: gcloud redis instances list --region=${REGION}`);
  console.log(`‚Ä¢ Delete Redis instance: gcloud redis instances delete ${REDIS_INSTANCE} --region=${REGION}`);
  console.log(`‚Ä¢ View Redis details: gcloud redis instances describe ${REDIS_INSTANCE} --region=${REGION}`);
  console.log('\n‚úÖ Setup completed successfully! üöÄ');
}

main();